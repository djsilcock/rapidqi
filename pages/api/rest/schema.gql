enum YesNoPending {
  Yes
  No
  Pending
  DontKnow
}
enum StaffType {
  FY1
  FY2
  ACCS
  Core
  Int
  Higher
  SAS
  Consultant
}
scalar Date

type User {
  id: ID
  rev: ID
  userName: String
  realName: String
  email: String
  category: StaffType
  isAdmin: Boolean
}

type Category {
  id: ID
  name: String
}

type ProjectPeople {
  proposers: [User]
  leaders: [User]
  involved: [User]
}

type ProjectDates {
  proposed: Date
  start: Date
  finish: Date
}

type Project {
  id: ID!
  rev: ID!
  title: String!
  people: ProjectPeople
  description: String!
  dates: ProjectDates
  methodology: String!
  category: [Category]
  email: String
  lastUpdated: Date
  lastUpdatedBy: User
  flags: [Flag]
}
type ActionPoint {
  id: ID!
  rev: ID!
  title: String!
  people: ProjectPeople
  description: String!
  dates: ProjectDates
  events: [Event]
  methodology: String!
  category: [Category]
  lastUpdated: Date
  lastUpdatedBy: User
  flags: [Flag]
}

type Event {
  id: ID!
  rev: ID!
  title: String!
  people: ProjectPeople
  eventDate: Date
  triumphs: String!
  challenges: String!
  suggestions: String!
  actionPoints: [ActionPoint]
  dates: ProjectDates
  methodology: String!
  category: [Category]
  email: String
  lastUpdated: Date
  lastUpdatedBy: User
  flags: [Flag]
}

input ActionPointInput {
  id: ID!
  rev: ID!
  title: String!
  people: ProjectPeopleInput
  description: String!
  dates: ProjectDatesInput
  events: [ID]
  methodology: String!
  category: [Category]
  lastUpdated: Date
  lastUpdatedBy: User
  flags: [Flag]
}

input EventInput {
  id: ID!
  rev: ID!
  title: String!
  people: ProjectPeople
  eventDate: Date
  triumphs: String!
  challenges: String!
  suggestions: String!
  actionPoints: [ActionPointInput]
  dates: ProjectDates
  methodology: String!
  category: [Category]
  email: String
  lastUpdated: Date
  lastUpdatedBy: User
  flags: [Flag]
}

input UserInput {
  id: ID
  rev: ID
  realName: String
  email: String
  category: StaffType
}
input ProjectPeopleInput {
  proposers: [ID]
  leaders: [ID]
  involved: [ID]
  new: [UserInput]
}
input ProjectDatesInput {
  proposed: Date
  start: Date
  finish: Date
}

input ProjectInput {
  id: ID
  rev: ID
  title: String!
  people: ProjectPeopleInput
  description: String!
  methodology: String!
  category: [ID]
  othertags: String
  email: String
  dates: ProjectDatesInput
}

enum Flag {
  needsVetting
  isVetted
  needsLead
  isRecruiting
  isCompleted
  hasCaldicott
  hasResearch
  maybeCaldicott
  maybeResearch
  pendingCaldicott
  pendingResearch
  notCaldicott
  notResearch
  criticalIncident
  canDisplay
  hidden

  recentlyUpdated
  all
}

type Query {
  getLoggedInUser: User
  getProject(id: ID): Project
  projectList(filter: [Flag]): [Project]
  allUsers: [User!]!
  getUser(id: ID): User
}

type Mutation {
  addProject(project: ProjectInput): Project
  addUser(user: UserInput): User
  updateUser(user: UserInput): User
}
